import wollok.game.*
import niveles.*
import enemigos.*
import decorado.*
import personaje.*
import armas.*
import direcciones.*

describe "niveles" {
	
	method initialize(){
	    nivel1.iniciar()
	}

	test "pasar de nivel" {	
		// deberia lanzar una exception si quedan enemigos por eliminar
		assert.throwsException({nivel1.siguienteNivel()})
		// eliminar los enemigos y pasar de nivel
		creadorDeEnemigos.enemigos().forEach({ enemigo => enemigo.morir()})
		nivel1.siguienteNivel()
		// deberia estar en el nivel 2
		assert.equals(nivel2, puerta.nivelActual())
	}	
	
	test "nivel1" {
		assert.that(game.hasVisual(fondo))
		assert.that(game.hasVisual(puerta))
		assert.that(game.hasVisual(personaje))
		assert.that(game.hasVisual(rama))
		assert.that(game.hasVisual(arco))
		assert.equals("background.jpg", fondo.image())
		assert.equals(3, creadorDeEnemigos.enemigos().size())
		assert.equals(nivel1, puerta.nivelActual())
	}
	
	test "nivel2" {
		creadorDeEnemigos.enemigos().forEach({ enemigo => enemigo.morir()})
		nivel1.siguienteNivel()
		
		assert.equals("background3.jpg", fondo.image())
		assert.equals(1, creadorDeEnemigos.enemigos().size())
		assert.equals(nivel2, puerta.nivelActual())
	}
}


describe "personaje" {
	test "movimiento" {
		assert.equals("pj-desnudo-derecha.png", personaje.image());

		personaje.mover(arriba);
		assert.equals("pj-desnudo-arriba.png", personaje.image());

		personaje.mover(izquierda);
		assert.equals("pj-desnudo-izquierda.png", personaje.image());

		personaje.mover(abajo);
		assert.equals("pj-desnudo-abajo.png", personaje.image());

		personaje.mover(derecha);
		assert.equals("pj-desnudo-derecha.png", personaje.image());
	}

	test "recibir danio" {
		assert.notThat(personaje.sinVida())
		assert.equals(10, personaje.vida())

		personaje.recibirDanioDeEnemigo(4)
		assert.equals(6, personaje.vida())
		assert.notThat(personaje.sinVida())
		
		personaje.recibirDanioDeEnemigo(6)
		assert.equals(0, personaje.vida())
		assert.that(personaje.sinVida())
	}
}

describe "enemigos" {
    const enemigo = new Enemigo(vida = 3,danio=1,drop = true, nombre= "bichoAzul", position = game.at(3,6) )

	test "movimiento" {
		assert.equals("bichoAzul-derecha.png", enemigo.imagenDelEnemigo());

		enemigo.pasarAModoCaminante(arriba);
		assert.equals("bichoAzul-arriba.png", enemigo.imagenDelEnemigo());

		enemigo.pasarAModoCaminante(izquierda);
		assert.equals("bichoAzul-izquierda.png", enemigo.imagenDelEnemigo());

		enemigo.pasarAModoCaminante(abajo);
		assert.equals("bichoAzul-abajo.png", enemigo.imagenDelEnemigo());
	}
	
	test "recibir danio" {
		assert.equals(3, enemigo.vida())
		enemigo.recibirDanio(1)
		assert.equals(2, enemigo.vida())
	}
}